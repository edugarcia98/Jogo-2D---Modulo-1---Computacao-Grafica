/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author 160011
 */
public class FrmJogo extends javax.swing.JFrame implements Runnable {
    
    private boolean left, right, top, down;
    private boolean tiro;
    private boolean tiroEspecial = false;
    private boolean reiniciar;
    private long delayTiro, delayTiroEspecial, delayTiroInimigo, delayTrocaCor;
    private long tempoGeraInimigo;
    private long tempoGeraEspecial;    
    private long tempoGeraVida;
    private long tempoGeraCor;
    Random r = new Random();
    /**
     * Creates new form FrmJogo
     */
    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_LEFT)
            left = true;
        else if(evt.getKeyCode() == KeyEvent.VK_RIGHT)
            right = true;
        else if(evt.getKeyCode() == KeyEvent.VK_UP)
            top = true;
        else if(evt.getKeyCode() == KeyEvent.VK_DOWN)
            down = true;
        else if(evt.getKeyCode() == KeyEvent.VK_SPACE)
            tiro = true;
        else if(evt.getKeyCode() == KeyEvent.VK_E)
            reiniciar = true;
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_LEFT)
            left = false;
        else if(evt.getKeyCode() == KeyEvent.VK_RIGHT)
            right = false;
        else if(evt.getKeyCode() == KeyEvent.VK_UP)
            top = false;
        else if(evt.getKeyCode() == KeyEvent.VK_DOWN)
            down = false;
        else if(evt.getKeyCode() == KeyEvent.VK_SPACE)
            tiro = false;
        else if(evt.getKeyCode() == KeyEvent.VK_E)
            reiniciar = false;
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        Graphics g;
        ArrayList<Base> componentesJogo = new ArrayList<Base>();
        boolean alternaTiro = false;
        int qtdBalasEspeciais = 0;
        Color cor = Color.white;
        
        Aviao aviao = new Aviao("img/plane.png");
        aviao.setX(getWidth()/2);
        aviao.setY(getHeight() - (aviao.getTamanho() * 2) + 25);
        aviao.setScore(0);
        aviao.setPontosVida(100);
        aviao.setIncX(0);
        aviao.setIncY(0);
        componentesJogo.add(aviao);
        
        while(true)
        {
            long tempo = System.currentTimeMillis();
            g = getBufferStrategy().getDrawGraphics();
            
            if(tempo > tempoGeraCor + 10000)
                cor = trocaCor(tempo);
            g.setColor(cor);
            g.fillRect(0, 0, getWidth(), getHeight());
            
            //Movimentos básicos
            for(Base b: componentesJogo)
                b.desenhar(g);
            
            for(Base b: componentesJogo)
                b.mover();
            
            aviao.movimento(left, right, top, down, getWidth(), getHeight());
            
            if(tiro && (tempo > delayTiro + 200))
            {
                componentesJogo.add(geraTiro(aviao, alternaTiro, tempo, tiroEspecial));
                
                if(alternaTiro == false)
                    alternaTiro = true;
                else
                    alternaTiro = false;
                
                if(tiroEspecial == true)
                {
                    qtdBalasEspeciais--;
                    
                    if(qtdBalasEspeciais == 0)
                        tiroEspecial = false;
                }
            }
            
            //Colisão do Tiro com o inimigo
            Tiro tiroAcertouInimigo = colisaoTiroInimigo(componentesJogo);
            if(tiroAcertouInimigo != null)
                componentesJogo.remove(tiroAcertouInimigo);
            
            //Gera Inimigo
            if(tempo > tempoGeraInimigo + r.nextInt(10000) + 2500)
                componentesJogo.add(geraInimigo(tempo, r.nextInt(3)));
            
            //Gera Especial
            if(tempo > tempoGeraEspecial + r.nextInt(20000) + 50000)    
                componentesJogo.add(geraPoderEspecial(new PoderEspecial("img/especial.png"), tempo));
            
            //Gera Vida
            if(tempo > tempoGeraVida + r.nextInt(20000) + 15000)
                componentesJogo.add(geraVida(new Vida("img/life.png"), tempo));
            
            //Colisão do Avião com o Especial
            PoderEspecial aux = colisaoAviaoEspecial(componentesJogo, aviao);
            if(aux != null)
            {
                componentesJogo.remove(aux);
                tiroEspecial = true;
                qtdBalasEspeciais += 50;
            }
            
            //Colisão do Avião com a Vida
            Vida v = colisaoAviaoVida(componentesJogo, aviao);
            if(v != null)
            {
                if(aviao.getPontosVida() >= 90 && aviao.getPontosVida() <= 100)
                    aviao.setPontosVida(100);
                else
                    aviao.setPontosVida(aviao.getPontosVida() + 10);
                
                componentesJogo.remove(v);
            }
            
            Inimigo i = colisaoAviaoInimigo(componentesJogo, aviao);
                componentesJogo.remove(i);
            
            //Destruir tiro
            Tiro tiroSaiu = destroiTiro(componentesJogo);
            if(tiroSaiu != null)
                    componentesJogo.remove(tiroSaiu);
            
            //Destruir inimigo
            Inimigo inimigoSaiu = destroiInimigo(componentesJogo, aviao);
            if(inimigoSaiu != null)
                componentesJogo.remove(inimigoSaiu);
            
            //Informações
            String infoVida = "Vida: " + aviao.getPontosVida();
            g.setColor(Color.BLACK);
            g.drawString(infoVida, 345, 45);
            
            String infoBullets = "Munição Especial: " + qtdBalasEspeciais;
            g.setColor(Color.BLACK);
            g.drawString(infoBullets, 286, 56);
            
            String infoPontos = "Pontos: " + aviao.getScore();
            g.setColor(Color.BLACK);
            g.drawString(infoPontos, 286, 68);
            
            //Acabar vida
            if(aviao.getPontosVida() <= 0)
            {
                componentesJogo.clear();
                TelaGameOver telaFim = new TelaGameOver("img/game_over.jpg");
                telaFim.desenhar(g);
                //g.setColor(Color.BLACK);
                //g.drawString("FIM DE JOGO", 100, 100);
                //g.drawString("Aperte E para reiniciar", 100, 115);
            }
            
            if(componentesJogo.size() == 0 && reiniciar == true)
            {
                aviao.setX(getWidth()/2);
                aviao.setY(getHeight() - (aviao.getTamanho() * 2) + 25);
                aviao.setScore(0);
                aviao.setPontosVida(100);
                aviao.setIncX(0);
                aviao.setIncY(0);
                componentesJogo.add(aviao);
                tiroEspecial = false;
                qtdBalasEspeciais = 0;
            }
            
            g.dispose();
            getBufferStrategy().show();
            
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
                //Logger.getLogger(FrmJogo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    //Geradores
    public Tiro geraTiro(Aviao aviao, boolean alternaTiro, long tempo, boolean tiroEspecial)
    {
        delayTiro = tempo;
        if(tiroEspecial == false)
        {
            TiroPadrao t = new TiroPadrao();
            t.setIncX(0);
            t.setIncY(-1);
            if(alternaTiro == false)
                t.setX((int) (aviao.getX() + (aviao.getTamanho()/2) + 22));
            else
                t.setX((int) (aviao.getX() + (aviao.getTamanho()/2) - 24));
            t.setY((int) (aviao.getY() + 8));
            t.setTamanho(2);
            return t;
        }
        else
        {
            TiroEspecial t = new TiroEspecial();
            t.setIncX(0);
            t.setIncY(-1);
            if(alternaTiro == false)
                t.setX((int) (aviao.getX() + (aviao.getTamanho()/2) + 21));
            else
                t.setX((int) (aviao.getX() + (aviao.getTamanho()/2) - 25));
            t.setY((int) (aviao.getY() + 8));
            t.setTamanho(5);
            return t;
        }
    }
  
    public PoderEspecial geraPoderEspecial(PoderEspecial especial, long tempo)
    {
        tempoGeraEspecial = tempo;
        especial.setX((getWidth()/2) + r.nextInt(200) - 100);
        especial.setY(22);
        especial.setIncX(0);
        especial.setIncY(0.75);
        return especial;
    }
    
    public Vida geraVida(Vida vida, long tempo)
    {
        tempoGeraVida = tempo;
        vida.setX((getWidth()/2) + r.nextInt(200) - 100);
        vida.setY(22);
        vida.setIncX(0);
        vida.setIncY(0.75);
        return vida;
    }
            
    public Inimigo geraInimigo(long tempo, int vRand)
    {
        tempoGeraInimigo = tempo;
        if(vRand == 0)
        {
            InimigoPadrao inimigo = new InimigoPadrao("img/enemy1.png");
            inimigo.setX((getWidth()/2) + r.nextInt(200) - 100);
            inimigo.setY(22);
            inimigo.setIncX(0);
            inimigo.setIncY(0.25);
            inimigo.setPontosVida(10);
            return inimigo;
        }
        else if(vRand == 1)
        {
            InimigoMedio inimigo = new InimigoMedio("img/enemy2.png");
            inimigo.setX((getWidth()/2) + r.nextInt(200) - 100);
            inimigo.setY(22);
            inimigo.setTamanho(40);
            inimigo.setIncX(0);
            inimigo.setIncY(0.15); 
            inimigo.setPontosVida(25);
            return inimigo;
        }
        else if(vRand == 2)
        {
            InimigoForte inimigo = new InimigoForte("img/enemy3.png");
            inimigo.setX((getWidth()/2) + r.nextInt(150) - 75);
            inimigo.setY(22);
            inimigo.setTamanho(70);
            inimigo.setIncX(0);
            inimigo.setIncY(0.1);
            inimigo.setPontosVida(40);
            return inimigo;
        }
        return null;
    }
    
    //Colisões
    public PoderEspecial colisaoAviaoEspecial(ArrayList <Base> componentesJogo, Aviao aviao)
    {
        for(Base b: componentesJogo)
        {
            if(b.getClass().toString().equals("class codigo.PoderEspecial"))
            {
                if(((aviao.getX() >= (b.getX() - (aviao.getTamanho()/2)))
                   && (aviao.getX() <= (b.getX() + (aviao.getTamanho()/2))))
                   && (aviao.getY() >= (b.getY() - (aviao.getTamanho()/2)))
                   && (aviao.getY() <= (b.getY() + (aviao.getTamanho()/2))))
                {
                    return (PoderEspecial) b;
                }         
            }
        }
        return null;
    }
    
    public Vida colisaoAviaoVida(ArrayList <Base> componentesJogo, Aviao aviao)
    {
        for(Base b: componentesJogo)
        {
            if(b.getClass().toString().equals("class codigo.Vida"))
            {
                if(((aviao.getX() >= (b.getX() - (aviao.getTamanho()/2)))
                   && (aviao.getX() <= (b.getX() + (aviao.getTamanho()/2))))
                   && (aviao.getY() >= (b.getY() - (aviao.getTamanho()/2)))
                   && (aviao.getY() <= (b.getY() + (aviao.getTamanho()/2))))
                {
                    return (Vida) b;
                }         
            }
        }
        return null;
    }
    
    public Inimigo colisaoAviaoInimigo(ArrayList <Base> componentesJogo, Aviao aviao)
    {
        for(Base b: componentesJogo)
        {
            if(b.getClass().toString().equals("class codigo.InimigoPadrao")
               || b.getClass().toString().equals("class codigo.InimigoMedio")
               || b.getClass().toString().equals("class codigo.InimigoForte"))
            {
                if(((b.getClass().toString().equals("class codigo.InimigoPadrao"))
                   && (aviao.getX() >= (b.getX() - (aviao.getTamanho()/2)))
                   && (aviao.getX() <= (b.getX() + (aviao.getTamanho()/2)))
                   && (aviao.getY() >= (b.getY() - (aviao.getTamanho()/2)))
                   && (aviao.getY() <= (b.getY() + (aviao.getTamanho()/2))))
                                            ||
                   ((b.getClass().toString().equals("class codigo.InimigoMedio"))
                   && (aviao.getX() >= (b.getX() - (aviao.getTamanho())))
                   && (aviao.getX() <= (b.getX() + (aviao.getTamanho())))
                   && (aviao.getY() >= (b.getY() - (aviao.getTamanho())))
                   && (aviao.getY() <= (b.getY() + (aviao.getTamanho()) + b.getTamanho() - 10)))
                                            ||
                        
                   ((b.getClass().toString().equals("class codigo.InimigoForte"))
                   && (aviao.getX() >= (b.getX() - (aviao.getTamanho()/3)))
                   && (aviao.getX() <= (b.getX() + (aviao.getTamanho()*3)))
                   && (aviao.getY() >= (b.getY() - (aviao.getTamanho())))
                   && (aviao.getY() <= (b.getY() + (aviao.getTamanho() * 2))))
                   )
                {
                    if(b.getClass().toString().equals("class codigo.InimigoPadrao"))
                        aviao.setPontosVida(aviao.getPontosVida() - 20);
                    else if(b.getClass().toString().equals("class codigo.InimigoMedio"))
                        aviao.setPontosVida(aviao.getPontosVida() - 50);            
                    else if(b.getClass().toString().equals("class codigo.InimigoForte"))
                        aviao.setPontosVida(aviao.getPontosVida() - 100);
                    
                    return (Inimigo) b;
                }
            }
        }
        return null;
    }
    
    public Tiro colisaoTiroInimigo(ArrayList <Base> componentesJogo)
    {
        for(Base b: componentesJogo)
        {
            if(b.getClass().toString().equals("class codigo.InimigoPadrao")
               || b.getClass().toString().equals("class codigo.InimigoMedio")
               || b.getClass().toString().equals("class codigo.InimigoForte"))
            {
                for(Base ba: componentesJogo)
                {
                    if(ba.getClass().toString().equals("class codigo.TiroPadrao") ||
                        ba.getClass().toString().equals("class codigo.TiroEspecial"))
                    {
                        if(((b.getClass().toString().equals("class codigo.InimigoPadrao")) 
                            && (ba.getX() >= (b.getX() - (b.getTamanho()/10)))
                            && (ba.getX() <= (b.getX() + (b.getTamanho())))
                            && (ba.getY() < (b.getY() + (b.getTamanho()/2))))
                                                   || 
                            ((b.getClass().toString().equals("class codigo.InimigoMedio"))
                            && (ba.getX() >= (b.getX()))
                            && (ba.getX() <= (b.getX() + (b.getTamanho() * 3.6)))
                            && (ba.getY() < (b.getY() + b.getTamanho())))
                                                   ||
                            ((b.getClass().toString().equals("class codigo.InimigoForte"))
                            && (ba.getX() >= (b.getX() + 30))
                            && (ba.getX() <= (b.getX() + (b.getTamanho() * 2.2)))
                            && (ba.getY() < (b.getY() + b.getTamanho())))
                            )
                        {
                            if(ba.getClass().toString().equals("class codigo.TiroPadrao"))
                                b.setPontosVida(b.getPontosVida() - 2);
                            else if(ba.getClass().toString().equals("class codigo.TiroEspecial"))
                                b.setPontosVida(b.getPontosVida() - 5);
                            return (Tiro) ba;
                        }
                    }
                }
            }
        }        
        return null;
    }
    
    //Destruir
    public Tiro destroiTiro(ArrayList <Base> componentesJogo)
    {
        for(Base b: componentesJogo)
        {
            if(b.getClass().toString().equals("class codigo.TiroPadrao") ||
                b.getClass().toString().equals("class codigo.TiroEspecial"))
            {
                if(b.getY() < 20)
                    return (Tiro) b;
            }
        }
        return null;
    }
    
    public Inimigo destroiInimigo(ArrayList <Base> componentesJogo, Aviao aviao)
    {
        int p = 0;
        for(Base b: componentesJogo)
        {
            if(b.getClass().toString().equals("class codigo.InimigoPadrao")
               || b.getClass().toString().equals("class codigo.InimigoMedio")
               || b.getClass().toString().equals("class codigo.InimigoForte"))
            {
                if((b.getY() > (getHeight() - (b.getTamanho()/2) + 5))
                    || b.getPontosVida() <= 0)
                {
                    if(b.getClass().toString().equals("class codigo.InimigoPadrao"))
                        p = 10;
                    else if(b.getClass().toString().equals("class codigo.InimigoMedio"))
                        p = 25;
                    else if(b.getClass().toString().equals("class codigo.InimigoForte"))
                        p = 50;
                        
                    if(b.getPontosVida() > 0)
                        aviao.setPontosVida(aviao.getPontosVida() - p);
                    else
                        aviao.setScore(aviao.getScore() + (p * 100));
                    return (Inimigo) b;
                }
            }
        }
        return null;
    }
    
    public Color trocaCor(long tempo)
    {
        tempoGeraCor = tempo;
        Color cor = new Color(r.nextInt(255), r.nextInt(255), r.nextInt(255));
        return cor;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
